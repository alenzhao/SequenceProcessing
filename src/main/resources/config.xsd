<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" attributeFormDefault="unqualified">
	<xs:element name="config">
		<xs:annotation>
			<xs:documentation>root element for the configuration</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="configType">
					<xs:sequence>
						<xs:sequence>
							<xs:element name="fnafile" type="xs:string" default="1.TCA.454Reads.fna">
								<xs:annotation>
									<xs:documentation>the filename of the FNA file</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name="qualfile" type="xs:string" default="1.TCA.454Reads.qual" minOccurs="0">
								<xs:annotation>
									<xs:documentation>the filename of the QUAL file</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name="midlist" type="xs:string">
								<xs:annotation>
									<xs:documentation>filename of MID list file (FASTA Format)</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name="primerlist" type="xs:string">
								<xs:annotation>
									<xs:documentation>filename of primer list file (FASTA Format)</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name="mismatches" minOccurs="0">
								<xs:annotation>
									<xs:documentation>settings for allowing mismatches in the MID and Primer sequence</xs:documentation>
								</xs:annotation>
								<xs:complexType>
									<xs:attribute name="mid" type="xs:int" default="0"/>
									<xs:attribute name="primer" type="xs:int" default="0"/>
								</xs:complexType>
							</xs:element>
							<xs:element name="filters" minOccurs="0">
								<xs:annotation>
									<xs:documentation>simple filters for input sequences</xs:documentation>
								</xs:annotation>
								<xs:complexType>
									<xs:sequence>
										<xs:element name="minLength" type="xs:int" default="-1" minOccurs="0">
											<xs:annotation>
												<xs:documentation>enforce a minimum length for sequences</xs:documentation>
											</xs:annotation>
										</xs:element>
										<xs:element name="maxNs" type="xs:int" default="-1" minOccurs="0">
											<xs:annotation>
												<xs:documentation>discard all sequences containing more than the specified number of N (unknown) bases</xs:documentation>
											</xs:annotation>
										</xs:element>
										<xs:element name="avgQual" type="xs:int" default="-1" minOccurs="0">
											<xs:annotation>
												<xs:documentation>filter sequences with average quality below threshold</xs:documentation>
											</xs:annotation>
										</xs:element>
										<xs:element name="singleMID" type="xs:string" minOccurs="0">
											<xs:annotation>
												<xs:documentation>keep only sequences with the specified MID</xs:documentation>
											</xs:annotation>
										</xs:element>
										<xs:element name="singlePrimer" type="xs:string" minOccurs="0">
											<xs:annotation>
												<xs:documentation>keep only sequences with the specified primer</xs:documentation>
											</xs:annotation>
										</xs:element>
									</xs:sequence>
								</xs:complexType>
							</xs:element>
							<xs:element name="DRBsplitting" default="false" minOccurs="0">
								<xs:annotation>
									<xs:documentation>split the found DRB sequences according to the reference sequences</xs:documentation>
								</xs:annotation>
								<xs:complexType>
									<xs:simpleContent>
										<xs:extension base="xs:boolean">
											<xs:attribute name="optimized" type="xs:boolean" default="true">
												<xs:annotation>
													<xs:documentation>setting false enforces slower but slightly more accurate splitting</xs:documentation>
												</xs:annotation>
											</xs:attribute>
										</xs:extension>
									</xs:simpleContent>
								</xs:complexType>
							</xs:element>
							<xs:element name="trimming" minOccurs="0" maxOccurs="unbounded">
								<xs:annotation>
									<xs:documentation>settings for trimming the sequences, either for all or for a selected primer (see target attribute)</xs:documentation>
								</xs:annotation>
								<xs:complexType>
									<xs:sequence>
										<xs:element name="quality" minOccurs="0">
											<xs:annotation>
												<xs:documentation>trim when quality value falls below threshold</xs:documentation>
											</xs:annotation>
											<xs:complexType>
												<xs:choice>
													<xs:element name="average">
														<xs:annotation>
															<xs:documentation>ensure the average quality from start to cutting point is above threshold</xs:documentation>
														</xs:annotation>
														<xs:complexType>
															<xs:attribute name="threshold" type="xs:int" use="required"/>
														</xs:complexType>
													</xs:element>
													<xs:element name="scoreUnder">
														<xs:annotation>
															<xs:documentation>trim after the first N quality scores under threshold</xs:documentation>
														</xs:annotation>
														<xs:complexType>
															<xs:attribute name="allowedCount" type="xs:int" default="1">
																<xs:annotation>
																	<xs:documentation>the allowed times the quality may fall below the threshold, default=1</xs:documentation>
																</xs:annotation>
															</xs:attribute>
															<xs:attribute name="threshold" type="xs:int" use="required"/>
														</xs:complexType>
													</xs:element>
													<xs:element name="windowUnder">
														<xs:annotation>
															<xs:documentation>use a sliding window, cut when window quality falls below threshold</xs:documentation>
														</xs:annotation>
														<xs:complexType>
															<xs:attribute name="windowSize" type="xs:int" default="5"/>
															<xs:attribute name="threshold" type="xs:int" use="required"/>
														</xs:complexType>
													</xs:element>
												</xs:choice>
											</xs:complexType>
										</xs:element>
										<xs:element name="afterPrimer" type="xs:boolean" default="false" minOccurs="0">
											<xs:annotation>
												<xs:documentation>trim front to remove MID and Primer</xs:documentation>
											</xs:annotation>
										</xs:element>
										<xs:element name="fixed" minOccurs="0">
											<xs:annotation>
												<xs:documentation>trim after the specified length, start is depending on afterPrimer</xs:documentation>
											</xs:annotation>
											<xs:complexType>
												<xs:simpleContent>
													<xs:extension base="xs:int">
														<xs:attribute name="from">
															<xs:annotation>
																<xs:documentation>front: trims N characters from front; back: trims AFTER N characters</xs:documentation>
															</xs:annotation>
															<xs:simpleType>
																<xs:restriction base="xs:string">
																	<xs:enumeration value="front"/>
																	<xs:enumeration value="back"/>
																</xs:restriction>
															</xs:simpleType>
														</xs:attribute>
													</xs:extension>
												</xs:simpleContent>
											</xs:complexType>
										</xs:element>
										<xs:element name="median" type="xs:boolean" default="false" minOccurs="0">
											<xs:annotation>
												<xs:documentation>trim at median of read lengths of the selected target</xs:documentation>
											</xs:annotation>
										</xs:element>
										<xs:element name="motif" minOccurs="0" maxOccurs="unbounded">
											<xs:annotation>
												<xs:documentation>trim at specified sequence motif</xs:documentation>
											</xs:annotation>
											<xs:complexType>
												<xs:simpleContent>
													<xs:extension base="xs:string">
														<xs:attribute name="type" use="required">
															<xs:annotation>
																<xs:documentation>type of given motif: regular expression or direct match</xs:documentation>
															</xs:annotation>
															<xs:simpleType>
																<xs:restriction base="xs:string">
																	<xs:enumeration value="regex"/>
																	<xs:enumeration value="match"/>
																</xs:restriction>
															</xs:simpleType>
														</xs:attribute>
														<xs:attribute name="cutpoint" type="xs:int" use="required">
															<xs:annotation>
																<xs:documentation>cutting point: 0 for start of motif, +int for position from start, -int for position from end</xs:documentation>
															</xs:annotation>
														</xs:attribute>
													</xs:extension>
												</xs:simpleContent>
											</xs:complexType>
										</xs:element>
									</xs:sequence>
									<xs:attribute name="target" default="all">
										<xs:annotation>
											<xs:documentation>Warning: setting all AND selected targets to the same trimming settings will have unintended sideeffects. afterPrimer and fixed trimmings are additive!</xs:documentation>
										</xs:annotation>
									</xs:attribute>
								</xs:complexType>
							</xs:element>
							<xs:element name="smoothing" minOccurs="0">
								<xs:annotation>
									<xs:documentation>perform sequence smoothing operations to increase usable sequences</xs:documentation>
								</xs:annotation>
								<xs:complexType>
									<xs:choice>
										<xs:element name="msa">
											<xs:annotation>
												<xs:documentation>perform a multiple sequence alignment and use "majority vote" to reduce possible errors</xs:documentation>
											</xs:annotation>
											<xs:complexType>
												<xs:attribute name="percentage" use="required">
													<xs:simpleType>
														<xs:restriction base="xs:int">
															<xs:minInclusive value="0"/>
															<xs:maxInclusive value="100"/>
														</xs:restriction>
													</xs:simpleType>
												</xs:attribute>
											</xs:complexType>
										</xs:element>
										<xs:element name="grouping">
											<xs:annotation>
												<xs:documentation>perform grouping and consensus method</xs:documentation>
											</xs:annotation>
											<xs:complexType>
												<xs:attribute name="percentage" use="required">
													<xs:simpleType>
														<xs:restriction base="xs:int">
															<xs:minInclusive value="0"/>
															<xs:maxInclusive value="100"/>
														</xs:restriction>
													</xs:simpleType>
												</xs:attribute>
												<xs:attribute name="consensusAsAnchor" type="xs:boolean" default="false"/>
												<xs:attribute name="anchorAsFiller" type="xs:boolean" default="true"/>
											</xs:complexType>
										</xs:element>
									</xs:choice>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
						<xs:element name="output">
							<xs:complexType>
								<xs:all minOccurs="0">
									<xs:element name="graphs" minOccurs="0">
										<xs:complexType>
											<xs:sequence maxOccurs="unbounded">
												<xs:element name="graph">
													<xs:complexType>
														<xs:choice maxOccurs="unbounded">
															<xs:element name="all" type="xs:boolean">
																<xs:annotation>
																	<xs:documentation>overview, all qualities grouped together</xs:documentation>
																</xs:annotation>
															</xs:element>
															<xs:element name="primer" type="xs:string">
																<xs:annotation>
																	<xs:documentation>qualities grouped by this primer</xs:documentation>
																</xs:annotation>
															</xs:element>
															<xs:element name="mid" type="xs:string">
																<xs:annotation>
																	<xs:documentation>qualities grouped by this MID</xs:documentation>
																</xs:annotation>
															</xs:element>
														</xs:choice>
														<xs:attribute name="name" type="xs:string" use="required">
															<xs:annotation>
																<xs:documentation>filename for the graph</xs:documentation>
															</xs:annotation>
														</xs:attribute>
													</xs:complexType>
												</xs:element>
											</xs:sequence>
										</xs:complexType>
										<xs:unique name="graphName">
											<xs:selector xpath="graph"/>
											<xs:field xpath="@name"/>
										</xs:unique>
									</xs:element>
									<xs:element name="allgraphs" type="xs:boolean" minOccurs="0">
										<xs:annotation>
											<xs:documentation>Generate graphs for all mid-primer pairs, as well as * all grouped by mid, * all grouped by primer and * all grouped</xs:documentation>
										</xs:annotation>
									</xs:element>
								</xs:all>
								<xs:attribute name="name" type="xs:string" use="required">
									<xs:annotation>
										<xs:documentation>the directoryname, archive name or filename to be used for the output</xs:documentation>
									</xs:annotation>
								</xs:attribute>
								<xs:attribute name="mode">
									<xs:simpleType>
										<xs:restriction base="xs:string">
											<xs:enumeration value="standard"/>
											<xs:enumeration value="singleFile"/>
											<xs:enumeration value="filePerMID"/>
											<xs:enumeration value="filePerPrimer"/>
										</xs:restriction>
									</xs:simpleType>
								</xs:attribute>
								<xs:attribute name="filename">
									<xs:annotation>
										<xs:documentation>the special file name used in singleFile mode, if unset the directory name is used</xs:documentation>
									</xs:annotation>
								</xs:attribute>
								<xs:attribute name="extension" use="required">
									<xs:simpleType>
										<xs:restriction base="xs:string">
											<xs:enumeration value="zip"/>
											<xs:enumeration value="tar.gz"/>
											<xs:enumeration value="tar.bz2"/>
										</xs:restriction>
									</xs:simpleType>
								</xs:attribute>
							</xs:complexType>
						</xs:element>
						<xs:element name="mailto" type="xs:string">
							<xs:annotation>
								<xs:documentation>email address to mail the result (download link) to</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
		<xs:unique name="trimTarget">
			<xs:selector xpath="trimming"/>
			<xs:field xpath="@target"/>
		</xs:unique>
	</xs:element>
	<xs:complexType name="configType"/>
</xs:schema>
